// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ef_tpc.Entities;

#nullable disable

namespace eftpc.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("InvestmentSequence");

            modelBuilder.HasSequence("InvestmentYieldSequence");

            modelBuilder.Entity("ef_tpc.Entities.Investment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [InvestmentSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ef_tpc.Entities.InvestmentYield", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [InvestmentYieldSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvestmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ef_tpc.Entities.Bond", b =>
                {
                    b.HasBaseType("ef_tpc.Entities.Investment");

                    b.Property<DateTime>("MaturityDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Yield")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Bonds");
                });

            modelBuilder.Entity("ef_tpc.Entities.Stock", b =>
                {
                    b.HasBaseType("ef_tpc.Entities.Investment");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("ef_tpc.Entities.Coupon", b =>
                {
                    b.HasBaseType("ef_tpc.Entities.InvestmentYield");

                    b.Property<int?>("BondId")
                        .HasColumnType("int");

                    b.HasIndex("BondId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ef_tpc.Entities.Dividend", b =>
                {
                    b.HasBaseType("ef_tpc.Entities.InvestmentYield");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.HasIndex("StockId");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("ef_tpc.Entities.InvestmentYield", b =>
                {
                    b.HasOne("ef_tpc.Entities.Investment", "Investment")
                        .WithMany()
                        .HasForeignKey("InvestmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Investment");
                });

            modelBuilder.Entity("ef_tpc.Entities.Coupon", b =>
                {
                    b.HasOne("ef_tpc.Entities.Bond", null)
                        .WithMany("Coupons")
                        .HasForeignKey("BondId");
                });

            modelBuilder.Entity("ef_tpc.Entities.Dividend", b =>
                {
                    b.HasOne("ef_tpc.Entities.Stock", null)
                        .WithMany("Dividends")
                        .HasForeignKey("StockId");
                });

            modelBuilder.Entity("ef_tpc.Entities.Bond", b =>
                {
                    b.Navigation("Coupons");
                });

            modelBuilder.Entity("ef_tpc.Entities.Stock", b =>
                {
                    b.Navigation("Dividends");
                });
#pragma warning restore 612, 618
        }
    }
}
